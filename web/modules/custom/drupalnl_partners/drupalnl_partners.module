<?php

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\Core\Field\FieldItemListInterface;
use Drupal\Core\Form\FormStateInterface;
define('DRUPALNL_PARTNER_ADMIN_ROLE', 'partner');
define('DRUPALNL_PARTNER_GOLD_NAME', 'Firmamedlem');

/**
 * Implements hook_ENTITY_TYPE_access().
 */
function drupalnl_partners_node_access(EntityInterface $entity, $operation, AccountInterface $account) {

  // Allow administrators with an organisation to edit their organisation Node.
  if ($entity->bundle() == 'organisation' && $operation == 'update') {

    foreach ($entity->field_administrators as $admin) {
      if ($admin->__get('target_id') == $account->id()) {
        return AccessResult::allowedIf(_drupalnl_partners_user_is_partner($account));
      }
    }
  }


  if ($entity->bundle() == 'organisation' && $operation == 'view') {
//    $terms = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties([
//      'vid' => 'partner_level',
//      'name' => DRUPALNL_PARTNER_GOLD_NAME,
//    ]);
//    $term = reset($terms);
//    if ($term && $entity->field_level->target_id != $term->id() && !$entity->access('update', $account, FALSE)) {
//      return \Drupal\Core\Access\AccessResult::forbidden('No edit rights for individual.');
//    }
  }

  return AccessResult::neutral();
}

/**
 * Implements hook_entity_field_access().
 */
function drupalnl_partners_entity_field_access($operation, FieldDefinitionInterface $field_definition, AccountInterface $account, FieldItemListInterface $items = NULL) {
  if ($field_definition->getTargetEntityTypeId() != 'node') {
    return AccessResult::neutral()->addCacheContexts(['user.roles']);
  }

  if ($field_definition->getTargetBundle() != 'organisation') {
    return AccessResult::neutral()->addCacheContexts(['user.roles']);
  }

  if (!in_array($operation, ['view', 'edit'])) {
    return AccessResult::neutral()->addCacheContexts(['user']);
  }

  if ($operation == 'edit') {
    if ($account->hasPermission('create organisation content')) {
      return AccessResult::neutral()->cachePerPermissions();
    }
  }

  if ($operation == 'view') {
    if ($field_definition->getName() == 'field_level') {
      return AccessResult::neutral()->addCacheContexts(['user']);
    }
  }

  $term_id = $items->getEntity()->get('field_level')->getString();

  /** @var \Drupal\taxonomy\TermInterface $term */
  $term = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($term_id);

//  if (!$term) {
//    return \Drupal\Core\Access\AccessResult::forbidden('Not an existing partner level.')->addCacheContexts(['user']);;
//  }

//  foreach ($term->get('field_access')->getValue() as $value) {
//    if ($value['value'] == $field_definition->getName()) {
//      return \Drupal\Core\Access\AccessResult::neutral()->addCacheContexts(['user']);
//    }
//  }

  return AccessResult::neutral()->addCacheContexts(['user']);
}

/**
 * Helper, Check if given Account has the role 'Partner'.
 *
 * @param \Drupal\Core\Session\AccountInterface $account
 *
 * @return bool
 */
function _drupalnl_partners_user_is_partner(AccountInterface $account) {
  $roles = $account->getRoles(TRUE);

  return (bool) in_array(DRUPALNL_PARTNER_ADMIN_ROLE, $roles);
}

/**
 * Implements hook_form_alter().
 */
function drupalnl_partners_form_alter(&$form, FormStateInterface $form_state, $form_id) {
//    ksm($form_id);
}

/**
 * Implements hook_form_FORM_ID_alter() for node_organisation_edit_form.
 */
function drupalnl_partners_form_node_organisation_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  /** @var \Drupal\taxonomy\TermStorageInterface $term_storage */

  // I don't think we need this functionality.
  //  $term_storage = \Drupal::entityTypeManager()->getStorage('taxonomy_term');
//
//  /** @var \Drupal\taxonomy\TermInterface[] $terms */
//  $terms = $term_storage->loadTree('partner_level', 0, NULL, TRUE);
//  foreach ($terms as $term) {
//    foreach ($term->get('field_access')->getValue() as $key => $value) {
//      $value = $value['value'];
//      if (isset($form[$value])) {
//        $name = empty($form_id) ? 'field_organisation[form][inline_entity_form][entities][0][form][field_level]' : 'field_level';
//        $form[$value]['#states']['visible'][':input[name="' . $name . '"]'][] = ['value' => $term->id()];
//      }
//
//    }
//  }
}

/**
 * Implements hook_form_FORM_ID_alter() for user_register_form.
 *
 * @see \Drupal\user\RegisterForm::form()
 */
function drupalnl_partners_form_user_register_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  _drupalnl_partners_form_alter_field_organisation($form);
}

/**
 * Implements hook_form_FORM_ID_alter() for user_form.
 *
 * @see \Drupal\user\AccountForm::form()
 */
function drupalnl_partners_form_user_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  _drupalnl_partners_form_alter_field_organisation($form);
}

/**
 * Implements hook_inline_entity_form_entity_form_alter().
 */
function drupalnl_partners_inline_entity_form_entity_form_alter(&$entity_form, &$form_state) {
  if ($entity_form['#entity_type'] == 'node' && $entity_form['#bundle'] == 'organisation') {
    drupalnl_partners_form_node_organisation_edit_form_alter($entity_form, $form_state, '');
  }
}

/**
 * Helper; Show field_organisation only if User has the role 'Partner'.
 */
function _drupalnl_partners_form_alter_field_organisation(&$form) {
  if (isset($form['field_organisation']) && isset($form['account']['roles'])) {
    $form['field_organisation']['#states'] = [
      'visible' => [
        ':input[name="roles[partner]"]' => ['checked' => TRUE],
      ],
    ];

    $form['field_organisation']['#access'] = \Drupal::currentUser()
      ->hasPermission('administer users');
  }
}
